resources:
  - name: connecting_resource
    type: PropertyBag
    configuration:
      key1: value1
      key2: value2

#   - name: testfileSpec
#     type: FileSpec
#     configuration:     
#       sourceArtifactory: art_v
#       pattern: "test-generic-local/github.com/deepika/hello/@v/v0.0.0.mod"
#       buildName: go_test
#        buildNumber:          2387

  - name: ns_aql
    type: Aql
    configuration:
      sourceArtifactory: art_v
      query: 'items.find({"$and":[{"artifact.module.build.name":{"$eq":"native_pipeline"}},{"artifact.module.build.number":{"$eq":"8"}}]})'     
      #addedProperties:
      mappings:
        - name: "a"
          input: "regex"
          output: "$1/$2"
        - name: "b"
          input: "regex"
          output: "$2/$1"
      
  - name: ns_dockerbuild_gitRepo
    type: GitRepo
    configuration:
      path: vishnurao12/sample-script
      gitProvider: git_v
      branches: 
        include: master

  - name: ns_buildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: master_test_buildInfo
      buildNumber: 123

  - name: ns_buildInfo_helm
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: master_test_buildInfo_helm
      buildNumber: 1.0.0
  
  - name: ns_promotedInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: master_test_promotedInfo
      buildNumber: 1

  - name: artifactory_go_example
    type: GitRepo
    configuration:
      path: vishnurao12/project-examples
      branches:
        include: master
      gitProvider: git_v
  - name: artifactory_go_exampletest
    type: GitRepo
    configuration:
      path: vishnurao12/project-examples
      branches:
        include: master
      gitProvider: git_v

  - name: artifactory_go_module_example
    type: GitRepo
    configuration:
      path: vishnurao12/artifactory-go-example
      branches:
        include: master
      gitProvider: git_v

  - name: go_build_info_publish_moduletest
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: go_example_module_publish_varsha
      buildNumber: 332
      
  - name: go_build_info_publishtest
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: go_example_build_publish_varsha
      buildNumber: 32
  
  - name: promoted_go_build_info_go_publishtest
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: promote_go_build_info_publish
      buildNumber: 35

  - name: promoted_build_info_gradle
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: promotoed-full-gradle-native
      buildNumber: 1

  - name: gradle_repo
    type: GitRepo
    configuration:
      gitProvider: git_v
      path: vishnurao12/project-examples

  - name: build_info_gradle
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: full-gradle-native
      buildNumber: 1

  - name: mvnBuild_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: mvn_sample_build_master_test
      buildNumber: 9

  - name: mvnBuild_infoScaned
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: mvn_scan_master_test
      buildNumber: 2
      
  - name: mvnBuild_infopromoted
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: mvn_promote_build_master_test
      buildNumber: 3
      
  - name: maven_repo
    type: GitRepo
    configuration:
      gitProvider: git_v
      path: vishnurao12/project-examples
      branches:
        include: ^test$

  - name: npmHelloWorld_repo
    type: GitRepo
    configuration:
      path: vishnurao12/npmHelloWorld
      gitProvider: git_v

  - name: npm_build_info_publish1
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: npm_publish
      buildNumber: 1

  - name: buildinfo_for_npmPublish
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: npm_publish
      buildNumber: 1
  
  - name: npm_build_info_promoted
    type: BuildInfo
    configuration:
      sourceArtifactory: art_v
      buildName: npm+promote
      buildNumber: 1

  - name: git_vishnu
    type: GitRepo
    configuration:
      gitProvider: git_v
      path: vishnurao12/charts
   
  - name: helm_repo
    type: HelmChart
    configuration: 
      sourceArtifactory: art_v
      repository: helm-local
      chart: test
      version: 1.0.0

#   - name: release_bundle_v
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: distribution_v
#       name: demo_rb
#       version: v1.0.0
      
#   - name: signed_bundle_v
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: distribution_v
#       name: demo_rb
#       version: v1.0.0      

#   - name:       go_ReleaseBundle_without1
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  distribution_v
#       name:                 test1
#       version:              1.0.0-m000

#   - name:       signed_go_ReleaseBundle_without
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  distribution_v
#       name:                 test1
#       version:              1.0.0-m000


#   - name:       go_ReleaseBundle_1_without
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist_without_sign
#       name:                 test2
#       version:              1.0.2
#       isSigned: true

#   - name:       signed_go_ReleaseBundle_2_without
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist_without_sign
#       name:                 test2
#       version:              1.0.2

#   - name:       go_ReleaseBundle
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist
#       name:                 test1
#       version:              1.0.0-m000
#       isSigned: true

#   - name:       signed_go_ReleaseBundle
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist
#       name:                 test1
#       version:              1.0.0-m000


#   - name:       go_ReleaseBundle_1
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist
#       name:                 test2
#       version:              1.0.2
#       isSigned: true

#   - name:       signed_go_ReleaseBundle_2
#     type:       ReleaseBundle
#     configuration:
#       sourceDistribution:  pipe_master_dist
#       name:                 test2
#       version:              1.0.2
# need to add git_v,art_v,docker_v integration. 
# need to add these repo docker-local,test-generic-local repo




#   - name:           distributionRuleresource
#     type:           DistributionRule
#     configuration:
#       sourceDistribution:  distribution_v
#       serviceName:          test
#       siteName:             test
#       cityName:             test
#       countryCodes:
#         - "123"





pipelines:
  - name: Master_test_pipe
#     configuration:  
#       runtime: # optional            
#         type: host 
        
#     configuration:
#       nodePool: win_2019
#       environmentVariables:
#         readOnly:
#           JFROG_CLI_BUILD_NAME: "PIPE-f2387"
#           JFROG_CLI_BUILD_NUMBER: 2387
    steps:
      - name: Download_win
        type: PowerShell
        configuration:
          nodePool: win_2019
          integrations:
            - name: art_v
          inputResources:
            - name: connecting_resource
#             - name: testfileSpec
              trigger: true
        execution:
          onExecute:
            - write-output "executing step..."

#       - name: dowload_linux
#         type: Bash
#         configuration:
#           integrations:
#             - name: art_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
#             - jfrog rt u test.sh example-repo-local/setup/test.sh 
            
#       - name: docker_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: docker_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
# #             - jfrog rt u test.sh example-repo-local/setup/test.sh 

#       - name: art_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: art_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
            
#       - name: gcp_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: gcp_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
            
#       - name: azure_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: azure_v1
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
 
#       - name: docker_fail_win
#         type: PowerShell
#         configuration:
#           integrations:
#             - name: docker_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
# #             - jfrog rt u test.sh example-repo-local/setup/test.sh 

#       - name: art_login_fail_win
#         type: PowerShell
#         configuration:
#           integrations:
#             - name: art_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
            
#       - name: gcp_login_fail_win
#         type: PowerShell
#         configuration:
#           integrations:
#             - name: gcp_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
            
#       - name: azure_login_fail_win
#         type: PowerShell
#         configuration:
#           integrations:
#             - name: azure_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh

#       - name: fileSpec_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: azure_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh
            
#        - name: Images_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: azure_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh  
            
#       - name: remote_File_login_fail
#         type: Bash
#         configuration:
#           integrations:
#             - name: azure_v
#           inputResources:
#             - name: connecting_resource
# #             - name: testfileSpec
#         execution:
#           onExecute:
#             - echo automation > test.sh

      - name: To_build_Docker_Image
        type: DockerBuild
        configuration:
          affinityGroup: "docker"
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "PIPE-f2387"
#             JFROG_CLI_BUILD_NUMBER: 2387
          dockerFileLocation: .
          dockerFileName: Dockerfile
#           dockerImageName: pipe-master.jfrog.info:8082/docker-local/node 
#           dockerImageName: 192.168.11.4:8082/docker-local/node
          dockerImageName: dev.jfrog-pipelines.com/docker-local/node
#           dockerImageName: pipelines.westus.cloudapp.azure.com:8082/docker_local/node
#           dockerImageName: u18.jfrog-pipelines.com/docker-local/node
          dockerImageTag: latest
          integrations:
            - name: art_v
#           inputSteps:
#             - name: Upload_to_artifactory
          inputResources:
            - name: ns_dockerbuild_gitRepo 
            - name: connecting_resource


      - name: To_Push_Docker_Image
        type: DockerPush
        configuration:
          affinityGroup: "docker"
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "PIPE-f2387"
#             JFROG_CLI_BUILD_NUMBER: 2387
          autoPublishBuildInfo: false #IMPORTANGT******************* : if this is true then only we need outputResource in DockerPush and no need of publishBuildInfo step
          targetRepository: docker-local #required
          integrations:
            - name: art_v 
          inputSteps:
            - name: To_build_Docker_Image

      - name: To_publish_buildInfo #IMPORTANGT******************* : required if autoPublishBuildInfo is false
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: To_Push_Docker_Image
          outputResources:
            - name: ns_buildInfo

      - name: To_promote_build
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local
          integrations:
            - name: art_v
          inputResources:
            - name: ns_buildInfo
          inputSteps:
            - name: To_publish_buildInfo
          outputResources:
            - name: ns_promotedInfo

#       - name: docker_releaseBundle
#         type: CreateReleaseBundle
#         configuration:
#           #inherits from bash
#           releaseBundleName:        test1
#           releaseBundleVersion:     1.0.0
#           inputResources:
#             - name:                  ns_promotedInfo
#             - name: go_build_info_publishtest
#           outputResources:
#             - name:                 docker_ReleaseBundle
#           dryRun: false
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"











      - name: build_go
        type: GoBuild
        configuration:
          sourceLocation: golang-example/hello
          repository: test-go-local
          outputLocation: /tmp/dist
          outputFile: hello_sample
          inputResources:
            - name: artifactory_go_example
            - name: connecting_resource
          integrations:
            - name: art_v
#           inputSteps:
#             - name: Upload_to_artifactory
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: go
#                 versions:
#                   - "1.15.2-f2674"
        execution:
          onStart:
            - "buildDir=$(find_resource_variable $inputGitRepoResourceName resourcePath)"
            - "pushd $buildDir/golang-example/hello"
            - "go get -insecure"
            - popd
#             - Push-Location $res_artifactory_go_example_resourcePath/golang-example/hello
#             - go get -insecure
#             - Pop-Location
#             - go version

      - name: publish_go_binarytest
        type: GoPublishBinary
        configuration:
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "go_test"
#             JFROG_CLI_BUILD_NUMBER: 2387
          inputSteps:
            - name: build_go
          targetRepository: test-go-local
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: go
#                 versions:
#                   - "1.15.2-f2674"
     
      - name: publish_buildtest
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_go_binarytest
          outputResources:
            - name: go_build_info_publishtest
        
      - name: publish_go_moduletest
        type: GoPublishModule
        execution:
          onStart:
            - go version
        configuration:  
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "go_test"
#             JFROG_CLI_BUILD_NUMBER: 2387
          sourceLocation: .  # required
          version: v0.0.0           # required
          targetRepository: test-go-local
          autoPublishBuildInfo: true
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: go
#                 versions:
#                   - "1.15.2-f2674"
          inputResources:
            - name: artifactory_go_module_example
          outputResources:
            - name: go_build_info_publish_moduletest
            
      - name: promote_build_gotest_binary
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local
          integrations:
            - name: art_v
          inputResources:
            - name: go_build_info_publishtest #go_build_info_publish
          outputResources:
            - name: promoted_go_build_info_go_publishtest
    
      - name: promote_build_gotest_module
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local
          integrations:
            - name: art_v
          inputResources:
            - name: go_build_info_publish_moduletest
          outputResources:
            - name: promoted_go_build_info_go_publishtest

#       - name: go_releaseBundle_v
#         type: CreateReleaseBundle
#         configuration:
#           #inherits from bash
#           dryRun:                   false
#           releaseBundleName:        demo_rb
#           releaseBundleVersion:     ${run_number}
#           inputResources:
#             - name:                  promoted_go_build_info_go_publishtest
#           outputResources:
#             - name:                 release_bundle_v
    
#       - name: go_signReleaseBundle_v
#         type: SignReleaseBundle
#         configuration:
#           inputResources:
#             - name:            release_bundle_v
#           outputResources:
#             - name:            signed_bundle_v
 


#       - name: my_distribute_v
#         type: DistributeReleaseBundle
#         configuration:
#           dryRun: true                
#           inputResources:
#             - name: signed_bundle_v
#               trigger: false   
#             - name:  distributionRuleresource  # one distributionRule is required
#               trigger: false    # default true
 
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"


#       - name: go_signReleaseBundle
#         type: SignReleaseBundle
#         configuration:
#           inputResources:
#             - name:            release_bundle_v
#               trigger: false
#           outputResources:
#             - name:            signed_bundle_v
 


#       - name: my_distribute
#         type: DistributeReleaseBundle
#         configuration:
#           dryRun: true                
#           inputResources:
#             - name: signed_bundle_v
#               trigger: false   
#             - name:  distributionRuleresource  # one distributionRule is required
#               trigger: false    # default true
 
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"








      - name: gradle_build_step
        type: GradleBuild
        configuration:
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "PIPE-f2387-gradle-build"
#             JFROG_CLI_BUILD_NUMBER: 2387
          gradleCommand: clean artifactoryPublish -b build.gradle
          sourceLocation: gradle-examples/gradle-example-minimal
          configFileLocation: .
          configFileName: gradle-art-config
          inputResources:
            - name: gradle_repo
            - name: connecting_resource
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: java
#                 versions:
#                   - "8"
        execution:
          onStart:
            - javac -version
            - gradle --version

      - name: publish_build_info_gradle
        type: PublishBuildInfo
        execution:
          onStart:
            - echo "hello"
        configuration:
          inputSteps:
            - name: gradle_build_step
          outputResources:
            - name: build_info_gradle

      - name: promote_build_info_gradle
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local
          copy: true
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"
          inputResources:
            - name: build_info_gradle
          outputResources:
            - name: promoted_build_info_gradle











      - name: mvnBuild_sample
        type: MvnBuild
        configuration:
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "PIPE-f2387-mvn"
#             JFROG_CLI_BUILD_NUMBER: 2387
          sourceLocation: ./artifactory-maven-plugin-example
          mvnCommand: clean install
          resolverSnapshotRepo: release-maven-remote
          resolverReleaseRepo: release-maven-remote
          deployerSnapshotRepo: release-maven-local
          deployerReleaseRepo: release-maven-local
          inputResources:
            - name: maven_repo
            - name: connecting_resource
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: java
#                 versions:
#                   - "8"
        execution:
          onStart:
            - javac -version
            - mvn --version
            
      - name: mvnBuild_publish
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: mvnBuild_sample
          outputResources:
            - name: mvnBuild_info
                
      - name: mvn_build_promote
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local # required 
          includeDependencies: true    # default false
          status: success # for mvn_build_promoted" # optional
          comment: "build needs to be promoted" # for mvn_build_promoted" # optional
          copy: true #optional - no need to have delete access it wont delete from base repo just moves copy to target repo
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: java
#                 versions:
#                   - "8"
          inputResources:
            - name: mvnBuild_info #required
          outputResources:
            - name: mvnBuild_infopromoted #required










      - name: build_npm
        type: NpmBuild
        configuration:
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "npm-test"
#             JFROG_CLI_BUILD_NUMBER: 2387
          repositoryName: npm-virtual
          sourceLocation: .
          inputResources:
            - name: npmHelloWorld_repo
            - name: connecting_resource
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"

      - name: publish_npm
        type: NpmPublish
        configuration:
#           autoPublishBuildInfo: true
          repositoryName: npm-virtual
          inputSteps:
            - name: build_npm
          integrations:
            - name: art_v
          outputResources:            
            - name: buildinfo_for_npmPublish 
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"

      - name: publish_build_info
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: publish_npm  
          outputResources:
            - name: npm_build_info_publish1
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"
            
#  ##################### - name: npm_auto_publish ###############################

      - name: build_npm_remote
        type: NpmBuild
        configuration:
          repositoryName: npm-virtual
          sourceLocation: .
          inputResources:
            - name: npmHelloWorld_repo
            - name: connecting_resource
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"

      - name: publish_npm_auto_true
        type: NpmPublish
        configuration:
          environmentVariables: # optional
            JFROG_CLI_BUILD_NAME: "npm-test12"
            JFROG_CLI_BUILD_NUMBER: 2387
          repositoryName: npm-virtual
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_npm_remote
          outputResources:
            - name: npm_build_info_publish1    # required if autoPublishBuildInfo is true.
          integrations:
            - name: art_v
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"

# ##################### end of npm_auto_publish ###############################
      - name: promote_build_npm
        type: PromoteBuild
        configuration:
          targetRepository: test-generic-local
          integrations:
            - name: art_v
          inputResources:
            - name: npm_build_info_publish1
            - name: connecting_resource
          outputResources:
            - name: npm_build_info_promoted
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "8.17.0"











      - name: helm_pub
        type: HelmPublish
        configuration:
          autoPublishBuildInfo: true
          environmentVariables: # optional
            JFROG_CLI_BUILD_NAME: "PIPE-f2387-helm-publish"
            JFROG_CLI_BUILD_NUMBER: 2387
          chartPath: stable/tomcat
          lint: true
#           lintFlags: --help
          helmVersion: 3
          inputResources:
            - name: git_vishnu 
            - name: connecting_resource
          outputResources:
            - name: helm_repo
            - name: ns_buildInfo_helm
          integrations:
            - name: git_v

#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: node
#                 versions:
#                   - "10.21.0"                  # required
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"

#       - name: To_publish_buildInfo_helm 
#         type: PublishBuildInfo
#         configuration:
#           inputSteps:
#             - name: helm_pub
#           outputResources:
#             - name: ns_buildInfo_helm

      - name: To_promote_build_helm
        type: PromoteBuild
        configuration:
          targetRepository: test-helm-local
          integrations:
            - name: art_v
          inputResources:
            - name: ns_buildInfo
          inputSteps:
            - name: To_publish_buildInfo
          outputResources:
            - name: ns_promotedInfo

#       - name: HelmDeploy
#         type: HelmDeploy
#         configuration:
#           helmVersion: 3
#           releaseName:         test1
#           integrations:
#             - name:         kube_invalid                # required
#           inputResources:
#             - name:         helm_repo 
#             - name: connecting_resource # required
            
#           runtime: 
#             type: image
#             image: 
#               auto:
#                 language: dotnetcore
#                 versions:
#                   - "2.1"   
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"

#   - name: Master_test_pipe_1
# #     configuration:
# #       nodePool: windows-test-pipe-3770

#     steps:
#       - name: build_go
#         type: GoBuild
#         configuration:
#           sourceLocation: golang-example/hello
#           repository: test-go-local
#           outputLocation: /tmp/dist
#           outputFile: hello_sample
#           inputResources:
#             - name: artifactory_go_example
#             - name: connecting_resource
#           integrations:
#             - name: art_v
# #           inputSteps:
# #             - name: Upload_to_artifactory
#           runtime: 
#             type: image
#             image:
#               custom:
#                 name: jfpip.jfrog.io/jfrog/pipelines-w19go
#                 tag: 1.15.2-f2674
#                 registry: art # optional integration for private registry
#                 sourceRepository: jfpip.jfrog.io
#         execution:
#           onStart:
# #             - "buildDir=$(find_resource_variable $inputGitRepoResourceName resourcePath)"
# #             - "pushd $buildDir/golang-example/hello"
# #             - "go get -insecure"
# #             - popd
# #             - $buildDir = find_resource_variable artifactory_go_example resourcePath
# #             - write-output $buildDir
#             - Push-Location $res_artifactory_go_example_resourcePath/golang-example/hello
#             - go get -insecure
#             - Pop-Location
# #             - go version

#       - name: publish_go_binarytest
#         type: GoPublishBinary
#         configuration:
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "go_test"
#             JFROG_CLI_BUILD_NUMBER: 2387
#           inputSteps:
#             - name: build_go
#           targetRepository: test-go-local
#           integrations:
#             - name: art_v
#           runtime: 
#             type: image
#             image:
#               custom:
#                 name: jfpip.jfrog.io/jfrog/pipelines-w19go
#                 tag: 1.15.2-f2674
#                 registry: art # optional integration for private registry
#                 sourceRepository: jfpip.jfrog.io
     
#       - name: publish_buildtest
#         type: PublishBuildInfo
#         configuration:
#           inputSteps:
#             - name: publish_go_binarytest
#           outputResources:
#             - name: go_build_info_publishtest
        
#       - name: publish_go_moduletest
#         type: GoPublishModule
#         execution:
#           onStart:
#             - go version
#         configuration:  
#           environmentVariables: # optional
#             JFROG_CLI_BUILD_NAME: "go_test"
#             JFROG_CLI_BUILD_NUMBER: 2387
#           sourceLocation: .  # required
#           version: v0.0.0           # required
#           targetRepository: test-go-local
#           autoPublishBuildInfo: true
#           integrations:
#             - name: art_v
#           runtime: 
#             type: image
#             image:
#               custom:
#                 name: jfpip.jfrog.io/jfrog/pipelines-w19go
#                 tag: 1.15.2-f2674
#                 registry: art # optional integration for private registry
#                 sourceRepository: jfpip.jfrog.io
#           inputResources:
#             - name: artifactory_go_module_example
#           outputResources:
#             - name: go_build_info_publish_moduletest
            
#       - name: promote_build_gotest_binary
#         type: PromoteBuild
#         configuration:
#           targetRepository: test-generic-local
#           integrations:
#             - name: art_v
#           inputResources:
#             - name: go_build_info_publishtest #go_build_info_publish
#           outputResources:
#             - name: promoted_go_build_info_go_publishtest
    
#       - name: promote_build_gotest_module
#         type: PromoteBuild
#         configuration:
#           targetRepository: test-generic-local
#           integrations:
#             - name: art_v
#           inputResources:
#             - name: go_build_info_publish_moduletest
#           outputResources:
#             - name: promoted_go_build_info_go_publishtest

#       - name: go_releaseBundle
#         type: CreateReleaseBundle
#         configuration:
#           #inherits from bash
#           releaseBundleName:        test1
#           releaseBundleVersion:     ${run_number}
 
#           inputResources:
#             - name:                  promoted_go_build_info_go_publishtest
#               trigger: false
#           outputResources:
#             - name:                 go_ReleaseBundle_1_without
#           dryRun: false
#           sign:                     true
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"

#       - name: go_signReleaseBundle
#         type: SignReleaseBundle
#         configuration:
#           inputResources:
#             - name:            go_ReleaseBundle_1_without
#               trigger: false
#           outputResources:
#             - name:            signed_go_ReleaseBundle_2_without
 
#         execution:
#           onStart:
#             - echo "Preparing for work..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"
